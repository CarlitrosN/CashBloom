"""
Django settings for config_proyecto project.
Generated by 'django-admin startproject' using Django 5.2.
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# TODO: Considerar mover SECRET_KEY a una variable de entorno o un archivo .env para producción.
SECRET_KEY = 'django-insecure-=2xpfik%0qyjqpyk#_7yzvir3&o$rqk&lso1u$1jori%silidd' # ESTÁ BIEN PARA DESARROLLO

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # ESTÁ BIEN PARA DESARROLLO, cambiar a False en producción.

# TODO: Configurar ALLOWED_HOSTS para producción (ej: ['www.tuapp.com', 'tuapp.com'])
ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Django Core Apps (Importante el orden para sobrescribir plantillas admin)
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    # Third-Party Apps
    'widget_tweaks',
    'tailwind',         # Necesaria para django-tailwind
    'import_export',    # Para la funcionalidad de import/export
    'taggit',           # Para el sistema de etiquetas
   

    # Your Local Apps
    'theme',            # App para los assets de Tailwind (creada por django-tailwind)
    'core',             # App principal o de configuración básica (Empresa)
    'gestion',          # App para módulos financieros (Cobros, Pagos, etc.)

    # Poner admin al final si no hay conflictos específicos
    'django.contrib.admin',
]

# --- django-tailwind Configuration ---
TAILWIND_APP_NAME = 'theme'
NPM_BIN_PATH = r"C:/Program Files/nodejs/npm.cmd"

# --- django-debug-toolbar Configuration (Opcional pero muy recomendado para desarrollo) ---
# Si instalas django-debug-toolbar:
# INSTALLED_APPS += ['debug_toolbar']
# MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
# Asegúrate de que INTERNAL_IPS esté definido

INTERNAL_IPS = [
    "127.0.0.1",
]

# --- Middleware ---
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware', # Necesario para INTERNAL_IPS / debug-toolbar
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'core.middleware.SeleccionEmpresaMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Añadir middleware de debug-toolbar aquí si se usa
]

ROOT_URLCONF = 'config_proyecto.urls'

# --- Templates Configuration ---
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # --- MEJORA: Añadir directorio de plantillas a nivel de proyecto ---
        'DIRS': [BASE_DIR / 'templates'], # Para plantillas base (base.html)
        'APP_DIRS': True, # Busca plantillas dentro de las carpetas 'templates' de las apps
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # Útil para depuración en plantillas
                'django.template.context_processors.request', # Necesario para muchas cosas (ej: request.user)
                'django.contrib.auth.context_processors.auth', # Añade 'user' y 'perms' al contexto
                'django.contrib.messages.context_processors.messages', # Para mostrar mensajes flash
                # 'django.template.context_processors.media', # Añadir si usas {{ MEDIA_URL }} en plantillas
            ],
        },
    },
]

WSGI_APPLICATION = 'config_proyecto.wsgi.application'


# --- Database Configuration ---
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        # TODO: Considerar usar PostgreSQL o MySQL para producción.
    }
}


# --- Password Validation ---
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# --- Internationalization ---
# TODO: Cambiar a 'es' (o tu código de idioma) si la interfaz principal será en español
LANGUAGE_CODE = 'es' # Cambiado a español
# TODO: Ajustar TIME_ZONE a tu zona horaria local (ej: 'America/Bogota', 'Europe/Madrid')
TIME_ZONE = 'UTC' # Mantenido UTC por ahora, pero revisar
USE_I18N = True
USE_TZ = True # Mantener True para manejo correcto de zonas horarias


# --- Static Files (CSS, JavaScript, Images de *tu código*) ---
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
# --- MEJORA: Definir STATICFILES_DIRS si tienes archivos estáticos a nivel de proyecto ---
STATICFILES_DIRS = [BASE_DIR / "static"]
# --- MEJORA: Definir STATIC_ROOT para producción (comando collectstatic) ---
# STATIC_ROOT = BASE_DIR / "staticfiles_collected" # Donde collectstatic copiará los archivos


# --- Media Files (Archivos subidos por usuarios) ---
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# --- Default primary key field type ---
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- django-taggit Configuration (Opcional) ---
# TAGGIT_CASE_INSENSITIVE = True # Si quieres que las tags sean case-insensitive

# --- URLs de Login/Logout ---
# A dónde ir si una vista requiere login (@login_required) y el usuario no está autenticado
LOGIN_URL = 'login' # El 'name' que le dimos a la URL de LoginView

# A dónde ir DESPUÉS de un login exitoso si no hay parámetro 'next'
LOGIN_REDIRECT_URL = 'gestion:dashboard' # El 'name' de la URL del dashboard de nuestra app 'gestion'

# A dónde ir DESPUÉS de un logout exitoso
LOGOUT_REDIRECT_URL = 'login' # Volver a la página de login
